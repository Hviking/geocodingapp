/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.beyondb.ui;

import com.beyondb.ui.display.ColumnSelectableJTable;
import com.beyondb.datasource.BydOperator;
import com.beyondb.datasource.DataSource;
import com.beyondb.datasource.DataSourceUtils;
import com.beyondb.io.ParseTableFactory;
import com.beyondb.swingworker.DeleteTableColumnSwingWorker;
import com.beyondb.swingworker.ImportAttributesIntoBeyonDBSwingWorker;
import com.beyondb.swingworker.ImportGeometryIntoBeyonDBSwingWorker;
import com.beyondb.swingworker.ParseAdressSwingWorker;
import com.beyondb.swingworker.TransformCoordinateSwingWorker;
import com.beyondb.utils.initSystemParams;
import java.awt.Component;
import java.awt.GridLayout;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.prefs.Preferences;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ScrollPaneConstants;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableModel;

/**
 *
 * @author 倪永
 */
public class JPanel_txtIntoDB extends javax.swing.JPanel implements IDialog {

    ColumnSelectableJTable m_Table;
    TableModel m_TableModel;
    private DataSource m_DataSource;

    private File m_Openfile;

    private ParseTableFactory m_Factory;

    private String m_Encode;
    private final JPanel_DataBaseTables m_ShowDataBaseTablesPanel;
   
    /**
     * Creates new form JPanel_txtIntoDB
     */
    public JPanel_txtIntoDB() {
        this.m_Encode = "";
        initComponents();
        m_ShowDataBaseTablesPanel = new JPanel_DataBaseTables(this);
        jPanel_DBtbls.add(m_ShowDataBaseTablesPanel);
        jPanel_DBtbls.setLayout(new GridLayout(1, 1));
        
        jComboBox_parseType.removeAllItems();

        jComboBox_parseType.addItem(initSystemParams.AddressParseType_BAIDU);
        jComboBox_parseType.addItem(initSystemParams.AddressParseType_BEYONDB);
        jComboBox_parseType.addItem(initSystemParams.AddressParseType_SKYMAP);

        this.m_Openfile = null;
        this.m_Table = null;
        this.m_TableModel = null;

    }

    public File getCurrentFile()
    {
        return  this.m_Openfile;
    }

    public void showDataBaseTables() {
        //不显示数据库列表刷新进度条
     m_ShowDataBaseTablesPanel.showDataBaseTablesNoDisplay();
    }
    /**
     * 要将记录导入库中后的数据类型
     */
    private enum DataType {

        /**
         * 空间数据
         */
        Geometry,
        /**
         * 常规数据
         */
        Attribute
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        ImportAttributesIntoBeyonDBbtn = new javax.swing.JButton();
        ParseAdressBtn = new javax.swing.JButton();
        ImportGeometryIntoBeyonDBbtn = new javax.swing.JButton();
        setCoordinateSysBtn = new javax.swing.JButton();
        jPanel_TxtIntoDB = new javax.swing.JPanel();
        jTextField_xls = new javax.swing.JTextField();
        jTablePanel = new javax.swing.JPanel();
        openfilebtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel_Encode = new javax.swing.JLabel();
        jComboBoxEncode = new javax.swing.JComboBox();
        jPanel_DBtbls = new javax.swing.JPanel();
        jComboBox_parseType = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setToolTipText("");
        setMaximumSize(new java.awt.Dimension(820, 369));
        setMinimumSize(new java.awt.Dimension(820, 369));
        setName("文本数据入库                           "); // NOI18N
        setPreferredSize(new java.awt.Dimension(820, 369));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        ImportAttributesIntoBeyonDBbtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/beyondb/ui/images/changguiruku.png"))); // NOI18N
        ImportAttributesIntoBeyonDBbtn.setContentAreaFilled(false);
        ImportAttributesIntoBeyonDBbtn.setFocusable(false);
        ImportAttributesIntoBeyonDBbtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ImportAttributesIntoBeyonDBbtn.setName("常规入库"); // NOI18N
        ImportAttributesIntoBeyonDBbtn.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/beyondb/ui/images/changguirukudianji.png"))); // NOI18N
        ImportAttributesIntoBeyonDBbtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ImportAttributesIntoBeyonDBbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportAttributesIntoBeyonDBbtnActionPerformed(evt);
            }
        });

        ParseAdressBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/beyondb/ui/images/dizhijiexi.png"))); // NOI18N
        ParseAdressBtn.setContentAreaFilled(false);
        ParseAdressBtn.setFocusable(false);
        ParseAdressBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ParseAdressBtn.setName("地址解析"); // NOI18N
        ParseAdressBtn.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/beyondb/ui/images/dizhijiexidianji.png"))); // NOI18N
        ParseAdressBtn.setVerifyInputWhenFocusTarget(false);
        ParseAdressBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ParseAdressBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParseAdressBtnActionPerformed(evt);
            }
        });

        ImportGeometryIntoBeyonDBbtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/beyondb/ui/images/kongjianhuaruku.png"))); // NOI18N
        ImportGeometryIntoBeyonDBbtn.setToolTipText("");
        ImportGeometryIntoBeyonDBbtn.setContentAreaFilled(false);
        ImportGeometryIntoBeyonDBbtn.setFocusable(false);
        ImportGeometryIntoBeyonDBbtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ImportGeometryIntoBeyonDBbtn.setName("空间化入库"); // NOI18N
        ImportGeometryIntoBeyonDBbtn.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/beyondb/ui/images/kongjianhuarukudianji.png"))); // NOI18N
        ImportGeometryIntoBeyonDBbtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ImportGeometryIntoBeyonDBbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportGeometryIntoBeyonDBbtnActionPerformed(evt);
            }
        });

        setCoordinateSysBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/beyondb/ui/images/zuobiaoxitongzhuanhuan.png"))); // NOI18N
        setCoordinateSysBtn.setContentAreaFilled(false);
        setCoordinateSysBtn.setFocusable(false);
        setCoordinateSysBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        setCoordinateSysBtn.setName("修改坐标系"); // NOI18N
        setCoordinateSysBtn.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/beyondb/ui/images/zuobiaoxitongzhuanhuandianji.png"))); // NOI18N
        setCoordinateSysBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        setCoordinateSysBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setCoordinateSysBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(setCoordinateSysBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ImportGeometryIntoBeyonDBbtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ParseAdressBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ImportAttributesIntoBeyonDBbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(2, 2, 2))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(148, Short.MAX_VALUE)
                .addComponent(ImportAttributesIntoBeyonDBbtn)
                .addGap(49, 49, 49)
                .addComponent(ParseAdressBtn)
                .addGap(49, 49, 49)
                .addComponent(ImportGeometryIntoBeyonDBbtn)
                .addGap(49, 49, 49)
                .addComponent(setCoordinateSysBtn)
                .addContainerGap(149, Short.MAX_VALUE))
        );

        add(jPanel1);

        jPanel_TxtIntoDB.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel_TxtIntoDB.setPreferredSize(new java.awt.Dimension(820, 369));

        jTextField_xls.setMinimumSize(new java.awt.Dimension(6, 30));
        jTextField_xls.setPreferredSize(new java.awt.Dimension(6, 30));
        jTextField_xls.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField_xlsKeyPressed(evt);
            }
        });

        jTablePanel.setBackground(new java.awt.Color(255, 255, 255));
        jTablePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTablePanel.setName(""); // NOI18N
        jTablePanel.setPreferredSize(new java.awt.Dimension(607, 245));

        javax.swing.GroupLayout jTablePanelLayout = new javax.swing.GroupLayout(jTablePanel);
        jTablePanel.setLayout(jTablePanelLayout);
        jTablePanelLayout.setHorizontalGroup(
            jTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jTablePanelLayout.setVerticalGroup(
            jTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 598, Short.MAX_VALUE)
        );

        openfilebtn.setText("……");
        openfilebtn.setFocusable(false);
        openfilebtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openfilebtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openfilebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openfilebtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("黑体", 1, 12)); // NOI18N
        jLabel2.setText("导入文件：");

        jLabel4.setFont(new java.awt.Font("黑体", 1, 12)); // NOI18N
        jLabel4.setText("文件预览：");

        jLabel_Encode.setBackground(new java.awt.Color(0, 0, 0));
        jLabel_Encode.setFont(new java.awt.Font("黑体", 1, 12)); // NOI18N
        jLabel_Encode.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_Encode.setText("编码方式");
        jLabel_Encode.setEnabled(false);

        jComboBoxEncode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "GBK", "UTF-8" }));
        jComboBoxEncode.setEnabled(false);
        jComboBoxEncode.setOpaque(false);
        jComboBoxEncode.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxEncodeItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel_DBtblsLayout = new javax.swing.GroupLayout(jPanel_DBtbls);
        jPanel_DBtbls.setLayout(jPanel_DBtblsLayout);
        jPanel_DBtblsLayout.setHorizontalGroup(
            jPanel_DBtblsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 182, Short.MAX_VALUE)
        );
        jPanel_DBtblsLayout.setVerticalGroup(
            jPanel_DBtblsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 602, Short.MAX_VALUE)
        );

        jComboBox_parseType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox_parseType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_parseTypeActionPerformed(evt);
            }
        });

        jLabel3.setText("匹配方式");

        javax.swing.GroupLayout jPanel_TxtIntoDBLayout = new javax.swing.GroupLayout(jPanel_TxtIntoDB);
        jPanel_TxtIntoDB.setLayout(jPanel_TxtIntoDBLayout);
        jPanel_TxtIntoDBLayout.setHorizontalGroup(
            jPanel_TxtIntoDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_TxtIntoDBLayout.createSequentialGroup()
                .addGroup(jPanel_TxtIntoDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_TxtIntoDBLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel_TxtIntoDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(jPanel_TxtIntoDBLayout.createSequentialGroup()
                                .addGroup(jPanel_TxtIntoDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel_TxtIntoDBLayout.createSequentialGroup()
                                        .addComponent(jTextField_xls, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(openfilebtn))
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel_TxtIntoDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel_Encode)
                                    .addComponent(jComboBoxEncode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel_TxtIntoDBLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)))
                .addGroup(jPanel_TxtIntoDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_TxtIntoDBLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel_DBtbls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel_TxtIntoDBLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel_TxtIntoDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jComboBox_parseType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel_TxtIntoDBLayout.setVerticalGroup(
            jPanel_TxtIntoDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_TxtIntoDBLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel_TxtIntoDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel_TxtIntoDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel_Encode)
                        .addComponent(jLabel3))
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6)
                .addGroup(jPanel_TxtIntoDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField_xls, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openfilebtn)
                    .addGroup(jPanel_TxtIntoDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxEncode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBox_parseType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_TxtIntoDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel_DBtbls, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE))
                .addGap(21, 21, 21))
        );

        add(jPanel_TxtIntoDB);
    }// </editor-fold>//GEN-END:initComponents

   
    private void ImportAttributesIntoBeyonDBbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportAttributesIntoBeyonDBbtnActionPerformed
        // TODO add your handling code here:
        //常规数据入库，没有空间化过程
        if (m_Table == null) {
            JOptionPane.showMessageDialog(this, "请首先打开需要地址解析的Excel/CSV/Txt文档!", "提示", JOptionPane.ERROR_MESSAGE);
            return;
        }
            importRecordIntoBeyonDB(DataType.Attribute);
        
    }//GEN-LAST:event_ImportAttributesIntoBeyonDBbtnActionPerformed

    private void ParseAdressBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParseAdressBtnActionPerformed
        // TODO add your handling code here:
        if (m_Table == null) {
            JOptionPane.showMessageDialog(this, "请首先打开需要地址解析的Excel/CSV/Txt文档!", "提示", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int[] cols = m_Table.getSelectedColumns();  //选择需要进行地址解析的列

        if (cols.length > 0) {
            ParseAdress(jComboBox_parseType.getSelectedItem().toString());
        } else {
            JOptionPane.showMessageDialog(this, "请选择地址匹配参考列，多选请按Shift键！", "提示", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_ParseAdressBtnActionPerformed

   
    private void ImportGeometryIntoBeyonDBbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportGeometryIntoBeyonDBbtnActionPerformed
        // TODO add your handling code here:
        if (m_Table == null) {
            JOptionPane.showMessageDialog(this, "请首先打开需要地址解析的Excel/CSV/Txt文档", "提示", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int[] cols = m_Table.getSelectedColumns();  //选择需要进行空间化的列（有经纬度）
        if (cols.length == 2) {
            importRecordIntoBeyonDB(DataType.Geometry);
        } else {
            JOptionPane.showMessageDialog(this,
                    "请按Shift键先后选择经纬度列，经度在前，纬度在后，点相应表头即可", "提示", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_ImportGeometryIntoBeyonDBbtnActionPerformed

    private void openfilebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openfilebtnActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);//取消所有文件选项
        FileNameExtensionFilter tempFileFilter;
         fileChooser.setDialogTitle("打开文件");
        tempFileFilter = new FileNameExtensionFilter("Excel2003文件|*.xls", "xls");
        fileChooser.addChoosableFileFilter(tempFileFilter);
        tempFileFilter = new FileNameExtensionFilter("Excel2007文件|*.xlsx", "xlsx");
        fileChooser.addChoosableFileFilter(tempFileFilter);
        tempFileFilter = new FileNameExtensionFilter("TXT文件|*.txt", "txt");
        fileChooser.addChoosableFileFilter(tempFileFilter);
        tempFileFilter = new FileNameExtensionFilter("CSV文件|*.csv", "csv");
        fileChooser.addChoosableFileFilter(tempFileFilter);
        //上次路径
        Preferences pref = Preferences.userRoot().node("cn/com/beyondb/txtIntoDB");
        String lastPath = pref.get("lastPath", "");

        if (!lastPath.isEmpty()) {
            fileChooser.setCurrentDirectory(new File(lastPath));
        }
        fileChooser.showOpenDialog(this);

        File file = fileChooser.getSelectedFile();

//        m_Openfile = new File("C:\\Users\\lbs\\Desktop\\car.xls");
        if (file != null) {
            openFile(file.getAbsolutePath());
        }
    }//GEN-LAST:event_openfilebtnActionPerformed

    
    private void openFile() {
        if (m_Table != null
                && !m_Table.isEnabled()) {
            JOptionPane.showMessageDialog(this,
                    "当前有任务正在进行，\n此时不允许加载新文件", "提示", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (m_Openfile != null) {

            jTextField_xls.setText(m_Openfile.getAbsolutePath());
            Preferences pref = Preferences.userRoot().node("cn/com/beyondb/txtIntoDB");
            pref.put("lastPath", m_Openfile.getPath());

            try {
                m_Encode = (String) jComboBoxEncode.getSelectedItem();
                m_Factory = new ParseTableFactory(m_Openfile, m_Encode);
                displayTableContent(m_Factory.getTableModel());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                        "读取文件失败,可能原因:\n" + e.getMessage(), "提示", JOptionPane.ERROR_MESSAGE);
                return;
            }
            setCoordinateSysBtn.setEnabled(true);
            ImportAttributesIntoBeyonDBbtn.setEnabled(true);
            ImportGeometryIntoBeyonDBbtn.setEnabled(true);
            ParseAdressBtn.setEnabled(true);

        }
     
    }
    private void setCoordinateSysBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setCoordinateSysBtnActionPerformed
        // TODO add your handling code here:

        if (m_Table == null) {
            JOptionPane.showMessageDialog(this, "请首先打开需要地址解析的Excel/CSV/Txt文档", "提示", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int[] cols = m_Table.getSelectedColumns();  //选择需要进行空间化的列（有经纬度）
        if (cols.length == 2) {
            JPanel_CoordinateSysSet coordinateSysSetPane;
            coordinateSysSetPane = new JPanel_CoordinateSysSet();

            int res = JOptionPane.showConfirmDialog(this, coordinateSysSetPane,
                    "设置要转换的坐标系", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
            if (res == 0) {
                //转换
                String sourceCoordinateSys = coordinateSysSetPane.getSourceCoordinateSys();
                String targetCoordinateSys = coordinateSysSetPane.getTargetCoordinateSys();
                transformCoordinateSys(sourceCoordinateSys, targetCoordinateSys);
            }
//            String sourceCoordinateSys = (String)jComboBox_SourceCoordinateSys.getSelectedItem();
//            String targetCoordinateSys = (String)jComboBox_targetCoordinateSys.getSelectedItem();
//            transformCoordinateSys(sourceCoordinateSys, targetCoordinateSys);
        } else {
            JOptionPane.showMessageDialog(this, "请按Shift键先后选择经纬度列，经度在前，纬度在后，点相应表头即可", "提示", JOptionPane.ERROR_MESSAGE);
        }
        

    }//GEN-LAST:event_setCoordinateSysBtnActionPerformed

 
    
    /**
     * 根据给出的路径打开文件内容，需要对路径参数进行判别
     * @param path 
     */
    private void openFile(String path)
    {
              File tmpFile = new File(path);
            if (tmpFile.isFile()
                    && tmpFile.exists()) {
                String name = tmpFile.getName().toLowerCase();
                String[] fileType={".xls",".xlsx",".txt",".csv"};    
                boolean isOk =false;
                for (String typeString : fileType) {
                    if (name.endsWith(typeString)) {
                        isOk = true;
                        if (typeString.equals(fileType[2])
                                || typeString.equals(fileType[3])) {
                            jLabel_Encode.setEnabled(true);
                            jComboBoxEncode.setEnabled(true);
                           
                        } else {
                            jLabel_Encode.setEnabled(false);
                            jComboBoxEncode.setEnabled(false);
                        }
                        break;
                    }
                }
                if (isOk) {
//                    if (m_Openfile != null) {
//                        if (m_Openfile.getAbsolutePath().equals(tmpFile.getAbsolutePath())) {
//                            //原文件又打开一次
//                            return;
//                        } else {//打开新文件
//                            m_Openfile = tmpFile;
//                        }
//                    } else {//第一次打开文件
//                        m_Openfile = tmpFile;
//                    }
                    m_Openfile = tmpFile;
                    openFile();
                }
            }else
            {
                m_Openfile =null;
                jTablePanel.removeAll();
                jTablePanel.updateUI();
            }
    }
    
    private void jTextField_xlsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_xlsKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
             openFile(jTextField_xls.getText());
        }
    }//GEN-LAST:event_jTextField_xlsKeyPressed

    private void jComboBoxEncodeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxEncodeItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange()==ItemEvent.SELECTED) {
            openFile(jTextField_xls.getText());
        }
     
    }//GEN-LAST:event_jComboBoxEncodeItemStateChanged

    private void jComboBox_parseTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_parseTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_parseTypeActionPerformed


    private void transformCoordinateSys(String sourceCoordinateSys,
            String targetCoordinateSys) {
        if (m_Table == null) {
            return;
        }
        TransformCoordinateSwingWorker swingWorker
                = new TransformCoordinateSwingWorker(this);
        swingWorker.setTableModel(m_TableModel);
        /**
         * 坐标列数据
         */
        Object[][]  coordColumnData = new Object[m_TableModel.getRowCount()][2];

        int[] selectedColumns = m_Table.getSelectedColumns();//经纬度列
        for (int rowIndex = 0; rowIndex < m_TableModel.getRowCount(); rowIndex++) {
            for (int colIndex = 0; colIndex < selectedColumns.length; colIndex++) {
                 coordColumnData[rowIndex][colIndex]=m_TableModel.getValueAt(rowIndex, selectedColumns[colIndex]);
            }
        }

//        String msg = "可以转换坐标的记录有%d条，总共%d条";
//        String formatMsg = String.format(msg, recordMap.size(), m_Table.getRowCount());
//        setShowMessage(formatMsg, JOptionPane.YES_OPTION);

        swingWorker.setParameters(
                coordColumnData,
                sourceCoordinateSys,
                targetCoordinateSys);
        swingWorker.setJTable(m_Table);
        
          String taskName =setCoordinateSysBtn.getText()
                +"["+parseFileName()+"]";
        swingWorker.setTaskName(taskName);
       
        ImportAttributesIntoBeyonDBbtn.setEnabled(false);
        ImportGeometryIntoBeyonDBbtn.setEnabled(false);
        setCoordinateSysBtn.setEnabled(false);
        new Thread(swingWorker).start();
    }
  
//        /**
//     * 展示选项卡
//     * @param panelName 
//     */
//    private void displayTab(String panelName){
//        try {
//            Object object =null;
//            Class cls = null;
//            boolean isExist = false;           
//            for (Component c : jTabbedPane1.getComponents()) {
//                try {
//                   
//                    if (panelName.equals(c.getName())) {
//                        isExist = true;
//                        object = c;
//                        break;
//                    }
//                } catch (Exception e) {
//                }
//
//            }
//            if (isExist) {
//                jTabbedPane1.setSelectedComponent((Component)object);
//            } else {
//
//                JPanel  newJPanel =new JPanel();
//                newJPanel.setName(panelName);
//                jTabbedPane1.add(panelName,newJPanel);
//                //   panel_txtIntoDB.setSize(821, 358);
//                
//                refreshTabbedPanel();
//                jTabbedPane1.setSelectedComponent(newJPanel);
//            }
//        } catch (ClassNotFoundException ex) {
//            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
//        } catch (InstantiationException | IllegalAccessException ex) {
//            Logger.getLogger(this.class.getName()).log(Level.SEVERE, null, ex);
//        }
//    }
 
      /**
     * 展示表格文件内容
     *
     * @param tableModel
     */
    public void displayTableContent(TableModel tableModel) {

        m_TableModel = tableModel;    
        m_Table = new ColumnSelectableJTable(m_TableModel);
        m_Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);//设置JTable的列宽度是否随着JTable的变化而变化。
        m_Table.setAutoscrolls(true);
        final JPanel_txtIntoDB manPanel = this;
        m_Table.getTableHeader().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                //右击，出现删除列菜单
                final int[] cols = m_Table.getSelectedColumns();  //选择列
                if (cols.length > 0) {
                    if (e.getButton() == MouseEvent.BUTTON3) {
                        JPopupMenu pop = new JPopupMenu("pop");
                        final JMenuItem item2 = new JMenuItem("删除列");

                        item2.addMouseListener(new MouseAdapter() {
                            @Override
                            public void mouseReleased(MouseEvent e) {
                                //删除节点数据库
                                if (item2.isEnabled()) {
                                    StringBuilder removeCols =new StringBuilder();
                                    removeCols.append("[");
                                    for (int colindex : cols) {
                                         removeCols.append( m_Table.getColumnName(colindex)).append(";") ;
                                    }
                                    removeCols.deleteCharAt(removeCols.length()-1);
                                   removeCols.append("]");
                                    if (JOptionPane.YES_OPTION == setShowConfirmDialog("确定删除列？\n" + removeCols + "\n ")) {
                                        DeleteTableColumnSwingWorker swingWorker
                                                = new DeleteTableColumnSwingWorker(manPanel);

                                        String taskName = "删除列"+removeCols;
                                         swingWorker.setParseTableFactory(m_Factory);
                                        swingWorker.setTaskName(taskName);
                                        swingWorker.setJTable(m_Table);
                                         swingWorker.setTableModel(m_TableModel);

                                        new Thread(swingWorker).start();
                                    }
                                }
                            }
                        }
                        );
                        pop.add(item2);
                        pop.show(e.getComponent(), e.getX(), e.getY());
                    }
                }
            }
        }
        );
//            String fileName = m_Openfile.getName().toLowerCase();
//            String tableName = fileName.replace(".xls", "");
//            m_Table.setName(tableName);

        JScrollPane jScrollp = new JScrollPane(m_Table, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,
                ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);


        jTablePanel.removeAll();
        jTablePanel.add(jScrollp);
        jTablePanel.setLayout(new GridLayout(1, 1));

        jTablePanel.setVisible(true);
        jTablePanel.updateUI();

        
    }


    /**
     * 记录入库
     *
     * @param type
     */
    private void importRecordIntoBeyonDB(DataType type) {
        if (m_Table == null) {
            return;
        }
        if (m_ShowDataBaseTablesPanel.getDataSource() == null) {
            setShowMessage("目标数据库不可用", JOptionPane.YES_OPTION);
            return;
        }
         m_DataSource = m_ShowDataBaseTablesPanel.getDataSource();
         
        if (m_Table.getName() == null) {
            CreateNewTablePanel createNewTablePanel = new CreateNewTablePanel();
            String tblName =m_ShowDataBaseTablesPanel.getTableNameFromTree();
            if (!tblName.isEmpty()) {
                createNewTablePanel.setDescription("已选择表："+tblName+" 如果选否将导入该表中");
            }
            int res = JOptionPane.showConfirmDialog(this, createNewTablePanel,
                    "创建新表,否则导入到数据库表列表中已存在的表", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE);
            if (res == JOptionPane.YES_OPTION) {
                //保存
                if (createNewTablePanel.getNewTableName().isEmpty()) //如果为空就递归
                {
                    importRecordIntoBeyonDB(type);
                    return;
                }
                DataSourceUtils dataSourceUtils = new DataSourceUtils(m_DataSource);
                BydOperator bydOperator = new BydOperator(dataSourceUtils);

                ArrayList<String> tbls;
                tbls = bydOperator.queryTables();
                if (tbls.contains(createNewTablePanel.getNewTableName().toLowerCase())) {//判断该表已存在
                    res = JOptionPane.showConfirmDialog(this,
                            "表【" + createNewTablePanel.getNewTableName() + "】已存在! "
                                    + "\n\n确定，导入数据到该存在表中 \n否， 将重新定义表名\n取消，取消当前入库操作 ", "提示",
                                    JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
                    if (res == JOptionPane.CANCEL_OPTION) {
                        return;
                    } else if (res == JOptionPane.NO_OPTION) {
                        importRecordIntoBeyonDB(type);
                        return;
                    }
                }
                m_Table.setName(createNewTablePanel.getNewTableName());

            } else  if(res == JOptionPane.NO_OPTION){
                //从数据库列表中指定已存在的表名
                    if (tblName.isEmpty()) {
                    return;
                }
                m_Table.setName(tblName);
            }else {
            //取消任务
                return;
            }
        }//if

        if (type == DataType.Attribute) {
            ImportAttributesIntoBeyondb();
        } else {
            ImportGeometryIntoBeyondb();
        }
        m_Table.setName(null);
    }

    private void ImportGeometryIntoBeyondb() {
        ImportGeometryIntoBeyonDBSwingWorker swingWorker
                = new ImportGeometryIntoBeyonDBSwingWorker(this);

        String[] captions = new String[m_Table.getColumnCount()];
        for (int i = 0; i < m_Table.getColumnCount(); i++) {
            captions[i] = m_Table.getColumnName(i);
        }

        Map<Integer, Object> recordMap = new HashMap<>();

        int[] selectedColumns = m_Table.getSelectedColumns();
        for (int rowIndex = 0; rowIndex < m_TableModel.getRowCount(); rowIndex++) {
            if (m_TableModel.getValueAt(rowIndex, selectedColumns[0]) == null
                    || String.valueOf(m_TableModel.getValueAt(rowIndex, selectedColumns[0])).isEmpty()) {
                //跳过没有经纬度值的行
                continue;
            }
            String[] tmpMatchRow;
            tmpMatchRow = new String[m_TableModel.getColumnCount()];
            for (int idx = 0; idx < m_TableModel.getColumnCount(); idx++) {
                tmpMatchRow[idx] = String.valueOf(m_TableModel.getValueAt(rowIndex, idx));
            }
            recordMap.put(rowIndex, tmpMatchRow);
        }

//        String msg = "可以空间化的记录有%d条，总共%d条";
//        String formatMsg = String.format(msg, recordMap.size(), m_Table.getRowCount());
//        setShowMessage(formatMsg, JOptionPane.YES_OPTION);

        swingWorker.setParameters(
                m_Table.getName(),
                captions,
                recordMap,
                m_DataSource);
        swingWorker.setTableModel(m_TableModel);
        swingWorker.setJTable(m_Table);
        
           String taskName =ImportGeometryIntoBeyonDBbtn.getText()
                +"["+parseFileName()+"]";
        swingWorker.setTaskName(taskName);
        
        ParseAdressBtn.setEnabled(false);
        ImportAttributesIntoBeyonDBbtn.setEnabled(false);
        ImportGeometryIntoBeyonDBbtn.setEnabled(false);
        setCoordinateSysBtn.setEnabled(false);

        new Thread(swingWorker).start();
    }

    private void ImportAttributesIntoBeyondb() {
        ImportAttributesIntoBeyonDBSwingWorker swingWorker
                = new ImportAttributesIntoBeyonDBSwingWorker(this);

        String[] captions = new String[m_Table.getColumnCount()];
        for (int i = 0; i < m_Table.getColumnCount(); i++) {

            captions[i] = m_Table.getColumnName(i);
        }

        Map<Integer, Object> record = new HashMap<>();

        for (int rowIndex = 0; rowIndex < m_TableModel.getRowCount(); rowIndex++) {

            String[] tmpMatchRow;
            tmpMatchRow = new String[m_TableModel.getColumnCount()];

            for (int idx = 0; idx < m_TableModel.getColumnCount(); idx++) {
                tmpMatchRow[idx] = (String) m_TableModel.getValueAt(rowIndex, idx);
            }
            record.put(rowIndex, tmpMatchRow);
        }

        swingWorker.setParameters(m_Table.getName(),
                captions,
                record,
                m_DataSource);
        swingWorker.setTableModel(m_TableModel);
        swingWorker.setJTable(m_Table);
        
        String taskName =ImportAttributesIntoBeyonDBbtn.getText()
                +"["+parseFileName()+"]";
        swingWorker.setTaskName(taskName);

        //execute方法是异步执行，它立即返回到调用者。在execute方法执行后，EDT立即继续执行   
//        swingWorker.execute();
        ParseAdressBtn.setEnabled(false);
        ImportAttributesIntoBeyonDBbtn.setEnabled(false);
        ImportGeometryIntoBeyonDBbtn.setEnabled(false);
        setCoordinateSysBtn.setEnabled(false);

        new Thread(swingWorker).start();
    }
    
    private String  parseFileName()
    {
        String fileName = m_Openfile.getAbsolutePath();
        int maxLength = 30;
        String txt;
        if (fileName.length() <= maxLength) {

            txt = fileName;
        } else {
            String tmp = fileName.substring(fileName.length() - maxLength);
            int index =tmp.indexOf(File.separatorChar);
            txt = "..." + tmp.substring(index>-1?index:0);
        }
        return txt;
    }

    private void ParseAdress(String parseType) {
 
        ParseAdressSwingWorker swingWorker
                = new ParseAdressSwingWorker(this);
        swingWorker.setTableModel(m_TableModel);
        String[] captions = new String[m_Table.getColumnCount()];
        for (int i = 0; i < m_Table.getColumnCount(); i++) {

            captions[i] = m_Table.getColumnName(i);
        }

        swingWorker.setParseTableFactory(m_Factory);
        swingWorker.setParameters(m_Table.getName(),
                captions,
                m_Table.getSelectedColumns());
        swingWorker.setJTable(m_Table);
        
        swingWorker.setParseType(parseType);
        String taskName =ParseAdressBtn.getText()
                +"["+parseFileName()+"]";
        swingWorker.setTaskName(taskName);
        ParseAdressBtn.setEnabled(false);
        ImportAttributesIntoBeyonDBbtn.setEnabled(false);
        ImportGeometryIntoBeyonDBbtn.setEnabled(false);
        setCoordinateSysBtn.setEnabled(false);

        new Thread(swingWorker).start();
    }

    /**
     * 设置按钮的Enable状态
     *
     * @param buttonText
     * @param flag
     */
    public void setButtonEnable(String buttonText, boolean flag) {
        Component[] components = jPanel_TxtIntoDB.getComponents();
        for (Component component : components) {
            try {
                JButton btn = (JButton) component;
                if (btn != null) {
                    if (btn.getText().equals(buttonText)) {
                        btn.setEnabled(flag);
                        return;
                    }
                }
            } catch (Exception e) {
            }

        }

    }

           /**
     * 设置按钮的Enable状态
     *
     * @param buttonsText
     * @param flag
     */
    public void setButtonEnable(ArrayList<String> buttonsText, boolean flag) {
        Component[] components = jPanel1.getComponents();
        for (Component component : components) {
            try {
                JButton btn = (JButton) component;
                if (btn != null) {
                    if (btn.getName()==null) {
                        continue;
                    }
                    if (buttonsText.contains(btn.getName())) {
                        btn.setEnabled(flag);
                    }
                }
            } catch (Exception e) {
            }

        }
   
    }
    
    
    private Component findComponent(Component ancestorComponent,
            String componentName)
    {
        Component comp =null;
        if (ancestorComponent.getName()!=null
                &&ancestorComponent.getName().equals(componentName)) {
            comp = ancestorComponent;
            return comp;
        }
        
        try {
            JPanel panel = (JPanel) ancestorComponent;
            if (panel != null) {
                for (Component tmpComp : panel.getComponents()) {
                     comp =findComponent(tmpComp, componentName);
                     if(comp!=null)
                         break;
                }
            }
//            JLayeredPane layeredPane = (JLayeredPane) ancestorComponent;
//            if (layeredPane != null) {
//                return findComponent(layeredPane, componentName);
//            }
//            JTabbedPane tabbedPane = (JTabbedPane) ancestorComponent;
//            if (tabbedPane != null) {
//                return findComponent(layeredPane, componentName);
//            }
        } catch (Exception e) {
            
        }
        return  comp;
       
    }
    /**
     * 激活按钮
     *
     * @param buttonText
     */
    public void setButtonActive(String buttonText) {
        Component[] components = jPanel_TxtIntoDB.getComponents();
        for (Component component : components) {
            JButton btn = (JButton) component;
            if (btn != null) {
                if (btn.getText().equals(buttonText)) {
                    btn.doClick();
                    return;
                }
            }

        }

    }

    /**
     * 弹出对话框
     *
     * @param msg 内容
     * @param JOptionPanestyle 样式
     */
    @Override
    public void setShowMessage(String msg, int JOptionPanestyle) {

        JOptionPane.showMessageDialog(this, msg, "提示", JOptionPanestyle);
    }

    @Override
    public int setShowConfirmDialog(String msg) {
        return JOptionPane.showConfirmDialog(this, msg, "确认", JOptionPane.YES_NO_OPTION);
    }
        /**
     *
     * @param panel 面板
     * @param title  标题
     * @param JOptionPanestyle 样式
     * @return
     */
    @Override
    public int setShowConfirmDialog(JPanel panel,String title,int JOptionPanestyle) {
        return JOptionPane.showConfirmDialog(this,panel, title,JOptionPanestyle,JOptionPane.PLAIN_MESSAGE);
           
    }

    /**
     *
     * @param title  标题
     * @param initValue  初始化值
     * @return
     */
    public String setShowInputDialog(String title,String initValue)
   {
      return JOptionPane.showInputDialog(this,title,initValue);
   }


    
     
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ImportAttributesIntoBeyonDBbtn;
    private javax.swing.JButton ImportGeometryIntoBeyonDBbtn;
    private javax.swing.JButton ParseAdressBtn;
    private javax.swing.JComboBox jComboBoxEncode;
    private javax.swing.JComboBox jComboBox_parseType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel_Encode;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel_DBtbls;
    private javax.swing.JPanel jPanel_TxtIntoDB;
    private javax.swing.JPanel jTablePanel;
    private javax.swing.JTextField jTextField_xls;
    private javax.swing.JButton openfilebtn;
    private javax.swing.JButton setCoordinateSysBtn;
    // End of variables declaration//GEN-END:variables

   


}