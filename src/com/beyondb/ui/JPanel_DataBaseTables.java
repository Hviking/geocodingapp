/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.beyondb.ui;

import com.beyondb.datasource.BydOperator;
import com.beyondb.datasource.DataSource;
import com.beyondb.datasource.DataSourceUtils;
import com.beyondb.io.DBConfig;
import com.beyondb.swingworker.ShowBeyonDBTablesSwingWorker;
import com.beyondb.swingworker.SuperSwingWorker;
import com.beyondb.utils.initSystemParams;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.ListCellRenderer;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author lbs
 */
public class JPanel_DataBaseTables extends javax.swing.JPanel {

    private JTree m_tblsTree;
    private IDialog m_Dia;
    private DataSource m_tempDataSource;
   private SuperSwingWorker  m_SwingWorker;
    private final DataSoureListItemListenerImpl DataSourceItemStateListener;

    /**
     * Creates new form JPanel_DataBaseTables
     *
     * @param dialog
     */
    public JPanel_DataBaseTables(IDialog dialog) {
        initComponents();
        m_Dia = dialog;
       DataSourceItemStateListener =  new DataSoureListItemListenerImpl();
        jComboBox_DataSource.addItemListener(DataSourceItemStateListener);
        jComboBox_DataSource.setToolTipText("双击可刷新数据库");
        initDataSourceList();
        initShowDataBaseTables(dialog);
        showDataBaseTablesNoDisplay();
    }

    public void showDataBaseTables() {
        if (m_tempDataSource != null) {
            if (m_SwingWorker != null) {
                m_SwingWorker.close();
            }
            ShowBeyonDBTablesSwingWorker showBeyonDBTablesSwingWorker = new ShowBeyonDBTablesSwingWorker(m_Dia, m_tblsTree);
            showBeyonDBTablesSwingWorker.setParameters(m_tempDataSource);
            showBeyonDBTablesSwingWorker.setTaskName("查询数据库表");
            showBeyonDBTablesSwingWorker.setProgressBarDisplay(true);
            m_SwingWorker = showBeyonDBTablesSwingWorker;
            Thread t = new Thread(showBeyonDBTablesSwingWorker);
            t.setName("数据源：" + m_tempDataSource.getID());
            t.start();
        }else
        {
            //请先选择可以访问的数据库。
            m_Dia.setShowConfirmDialog("请先选择可用的目标数据库");
        }
    }

        public void showDataBaseTablesNoDisplay() {
        if (m_tempDataSource != null) {
            if (m_SwingWorker!=null) {
                    m_SwingWorker.close();
            }
            ShowBeyonDBTablesSwingWorker showBeyonDBTablesSwingWorker = new ShowBeyonDBTablesSwingWorker(m_Dia, m_tblsTree);
            showBeyonDBTablesSwingWorker.setParameters(m_tempDataSource);
            showBeyonDBTablesSwingWorker.setTaskName("查询数据库表");
            showBeyonDBTablesSwingWorker.setProgressBarDisplay(false);
            m_SwingWorker = showBeyonDBTablesSwingWorker;
            Thread t = new Thread(showBeyonDBTablesSwingWorker);
            t.setName("数据源：" + m_tempDataSource.getID());
            t.start();
        }
    }

    private void removeDataBaseTable(String removeableTbl) {
        if (removeableTbl == null || removeableTbl.isEmpty()) {
            return;
        }
        DataSourceUtils dataSourceUtils = new DataSourceUtils(m_tempDataSource);
        BydOperator bydOperator = new BydOperator(dataSourceUtils);

        if (bydOperator.isGeomTable(removeableTbl)) {
            bydOperator.dropGeomTable(removeableTbl);
        } else if (bydOperator.isRasterTable(removeableTbl)) {
            bydOperator.dropRasterTable(removeableTbl);
        } else {
            bydOperator.dropTable(removeableTbl);
        }
    }

   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        jComboBox_DataSource = new javax.swing.JComboBox();

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("数据库列表");

        jComboBox_DataSource.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox_DataSource.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox_DataSourceMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jComboBox_DataSource, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox_DataSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox_DataSourceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox_DataSourceMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2
                && evt.getButton() == 1) {
            //双击
            jComboBox_DataSource.removeItemListener(DataSourceItemStateListener);
            initDataSourceList();
            if (jComboBox_DataSource.getItemCount() > 0) {
                m_tempDataSource = (DataSource) jComboBox_DataSource.getItemAt(0);
                showDataBaseTables();
            }
            jComboBox_DataSource.addItemListener(DataSourceItemStateListener);
        }
    }//GEN-LAST:event_jComboBox_DataSourceMouseClicked

    private void initShowDataBaseTables(IDialog dialog) {
        DefaultMutableTreeNode TblRootNode
                = new DefaultMutableTreeNode("数据库表", true);

        m_tblsTree = new JTree(TblRootNode);

        m_tblsTree.expandRow(0);
        jScrollPane1.getViewport().add(m_tblsTree);

        jScrollPane1.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        jScrollPane1.setVerticalScrollBarPolicy(
                JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        jScrollPane1.setViewportView(m_tblsTree);

        MouseListenerImpl treeNodemouseListenerImpl = new MouseListenerImpl(this);

        m_tblsTree.addMouseListener(treeNodemouseListenerImpl);
//        m_tblsTree.setCellRenderer(new MyTreeCellRenderer());
//        ToolTipManager.sharedInstance().registerComponent(m_tblsTree);//很重要，否则不显示tooltip
    }

    /**
     *
     * @return 返回可用的目标数据源,不可用则为null
     */
    public DataSource getDataSource() {
        TreeModel treeModel = m_tblsTree.getModel();
        DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) treeModel.getRoot();
        if (rootNode.getUserObject() instanceof DataSource) {
            return (DataSource) rootNode.getUserObject();
        }
        return null;
    }
    
    public String getTableNameFromTree() {
        try {

            Object o = jScrollPane1.getViewport().getComponent(0);
            JTree tr = (JTree) o;
            if (tr.getSelectionCount() == 1) //如果没有选择表
            {
                TreePath selectionPath = tr.getSelectionPath();
                DefaultMutableTreeNode selectNode = (DefaultMutableTreeNode) selectionPath.getLastPathComponent();
                if (selectNode.isLeaf()) {

                    String txt = selectNode.getUserObject().toString();
                    return txt;
                }
            }
            return "";
        } catch (Exception e) {

            Logger.getLogger(this.getName()).log(Level.WARNING, "判断数据库列表树出错");
            return "";
        }
    }

   public  String getFirstTableNameFromTree() {
        try {

            Object oComponet = jScrollPane1.getViewport().getComponent(0);
            JTree tr = (JTree) oComponet;
            tr.clearSelection();
        
            TreeModel treeModel = tr.getModel();
            DefaultMutableTreeNode firstnode = (DefaultMutableTreeNode) treeModel.getChild(treeModel.getRoot(),0);
            if(firstnode!=null)
                return  firstnode.getUserObject().toString();
            return "";
        } catch (Exception e) {

            Logger.getLogger(this.getName()).log(Level.WARNING, "判断数据库列表树出错");
            return "";
        }
    }


    /**
     * 打开数据源列表
     */
    private void initDataSourceList() {
        ArrayList<DataSource> dataSources = DBConfig.readDBConfig1((String) initSystemParams.getInstance()
                .getSystemParam(initSystemParams.PARAM.PARAM_DATASOURCE_PATH));
        jComboBox_DataSource.removeAllItems();
        for (DataSource ds : dataSources) {
            jComboBox_DataSource.addItem(ds);
        }
        jComboBox_DataSource.setPreferredSize(new Dimension(100,21));
        jComboBox_DataSource.setMaximumSize(new Dimension(150, 21));
        jComboBox_DataSource.setRenderer(new MyComboBoxRenderer(jComboBox_DataSource));

    }

    private  class MouseListenerImpl implements MouseListener {

        private final JPanel_DataBaseTables m_Panel;

        public MouseListenerImpl(JPanel_DataBaseTables panel) {
            m_Panel = panel;
        }


        @Override
        public void mouseClicked(MouseEvent e) {
            if (e.getButton() == MouseEvent.BUTTON3) {
                JPopupMenu pop = new JPopupMenu("pop");
                JMenuItem item1 = new JMenuItem("刷新");
                final JMenuItem item2 = new JMenuItem("删除");

                if("".equals(m_Panel.getTableNameFromTree()))
                {
                    item2.setEnabled(false);
                }
                item1.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseReleased(MouseEvent e) {
                        //刷新数据库表的列表
                        showDataBaseTables();
                    }
                });
                item2.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseReleased(MouseEvent e) {
                        //删除节点数据库
                        if (item2.isEnabled()) {
                            String removeableTbl = m_Panel.getTableNameFromTree();
                            if (JOptionPane.YES_OPTION == m_Dia.setShowConfirmDialog("确定删除表" + removeableTbl + "？")) {
                                m_Panel.removeDataBaseTable(removeableTbl);
                                showDataBaseTables();
                            }                            
                        }
                      
                    }
                });
                pop.add(item1);
                pop.add(item2);
                //e.getComponent()表示与右键菜单关联的组件，这里指button2  
                pop.show(e.getComponent(), e.getX(), e.getY());
            }
        }

        @Override
        public void mousePressed(MouseEvent e) {

        }

        @Override
        public void mouseReleased(MouseEvent e) {

        }

        @Override
        public void mouseEntered(MouseEvent e) {

        }

        @Override
        public void mouseExited(MouseEvent e) {

        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox_DataSource;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    class MyComboBoxRenderer extends JLabel implements ListCellRenderer{      

       JComboBox com;

       MyComboBoxRenderer(JComboBox combox){

              com = combox;

              setOpaque(true);

       }


       /*参数信息：list，JCombox组件的项

        * value：当前选择的项的值（相当于输入栏显示的值，不是鼠标移动到的值）

        * index：鼠标指向的项的索引

        * isSelected：鼠标指向的项是否被选中

        * cellHasFocus：是否有焦点植入

        */
       @Override
      public Component getListCellRendererComponent(JList list, Object value,
                int index, boolean isSelected, boolean cellHasFocus) {

       // TODO Auto-generated method stub
            String item = (value == null) ? "" : value.toString();//得到刚才输入的内容

            
            setText(item);//输出刚才得到的内容

            //提示信息
            if (value instanceof DataSource) {
                list.setToolTipText(((DataSource)value).getUrl());
           }else
            {
                list.setToolTipText(item);
            }
//           Color background;
//           Color foreground;
//           if (isSelected) {                    //如果选择了这个项
//               background = Color.BLUE;//背景色设置为蓝色（填充颜色）
//               foreground = Color.WHITE;//前景色设置为白色（字体颜色）
//               // unselected, and not the DnD drop location
//           } else {
//               background = Color.WHITE;//背景色设置为白色
//               foreground = Color.BLACK;//前景色设置为黑色
//            }
//
//            setBackground(background);
//
//            setForeground(foreground);
            return this;
        }

    }
 class MyTreeCellRenderer extends DefaultTreeCellRenderer{      

     private final BydOperator bydOperator;
        private final ImageIcon geomIcon;
        private final ImageIcon rasterIcon;
        private final ImageIcon tableIcon;

     MyTreeCellRenderer() {
         DataSourceUtils dataSourceUtils = new DataSourceUtils(m_tempDataSource);
         bydOperator = new BydOperator(dataSourceUtils);
         geomIcon = new javax.swing.ImageIcon(getClass().getResource("/com/beyondb/ui/images/geom.png"));
         rasterIcon = new javax.swing.ImageIcon(getClass().getResource("/com/beyondb/ui/images/raster.png"));
         tableIcon = new javax.swing.ImageIcon(getClass().getResource("/com/beyondb/ui/images/table.png"));

     }

        @Override
     public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {
            super.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);
            String item = (value == null) ? "" : value.toString();//得到刚才输入的内容
            //如果是根节点，返回
            DefaultMutableTreeNode node =(DefaultMutableTreeNode)value;
            if (node.getParent()==null) {
                return this;
            }
            if (leaf && selected) {
                if (bydOperator.isGeomTable(item)) {
//                        setIcon(geomIcon);
                    setToolTipText("矢量表");//提示信息
                } else if (bydOperator.isRasterTable(item)) {
//                        setIcon(rasterIcon);
                    setToolTipText("栅格表");//提示信息
                } else {
//                        setIcon(tableIcon);
                    setToolTipText("普通表");//提示信息
                }
            }
            return this;
     }

    }
    private class DataSoureListItemListenerImpl implements ItemListener {

        @Override
        public void itemStateChanged(ItemEvent evt) {
            if (evt.getStateChange() == ItemEvent.SELECTED) {
                m_tempDataSource = (DataSource) jComboBox_DataSource.getSelectedItem();
                showDataBaseTables();
            }
        }
    }

}
